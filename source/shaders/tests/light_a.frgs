#version 330 core
precision highp float;
in vec3 v_pos;
in vec3 v_nor;
in vec2 v_uv;
in vec3 frag_pos;

in vec3 light_position;

out vec4 color;

uniform float u_time;
uniform sampler2D tex0;
uniform sampler2D tex1;

uniform vec3 object_color;
uniform vec3 light_color;

#define AMBIENT_STRENGTH 0.1
#define SPECULAR_STRENGTH 0.5
#define SHININESS 32

vec3 phong()
{
    // ambient
    vec3 ambient = AMBIENT_STRENGTH * light_color;
    
    // diffuse
    vec3 norm = normalize(v_nor);
    vec3 light_dir = normalize(light_position - frag_pos);
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffuse = diff * light_color;
    
    // specular
    vec3 view_dir = normalize(-frag_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), SHININESS);
    vec3 specular = SPECULAR_STRENGTH * spec * light_color;
    
    vec3 light_result = (ambient + diffuse + specular) * object_color;
    return light_result;
}

void main(void)
{
    vec3 light_result = phong();
    //color = vec4(vec3(sqrt(light_result)), 1.0f);
    color = vec4(light_result, 1.0f) 
            * texture(tex0, vec2(v_uv.x + u_time, v_uv.y));
            
    color = vec4(light_result, 1.0f);
}
