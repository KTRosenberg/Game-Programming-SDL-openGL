#version 330 core
precision highp float;
in vec3 v_pos;
in vec2 v_uv;
out vec4 color;
uniform float u_time;
uniform sampler2D tex0;
uniform sampler2D tex1;

float random(vec3 scale, float seed)
{
    return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ;
}

void main(void)
{
    float p_noise = 10.0 * -.10 * turbulence(vec3(.5) + u_time);

    // get a random offset
    float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );

    vec2 t_pos = vec2( 0, 1.3 * p_noise + r );
    vec4 _color = texture(tex0, t_pos);

    color = vec4(sqrt(_color.rgb), 1.0 );
  
    //color = texture(_texture, vec2(v_uv.x, (1.0 - v_uv.y) + u_time)) * max(sin(vec4(u_time, v_pos.x, u_time, 1.0f)),.7);
//     vec2 offset = vec2(v_uv.x, (1.0 - v_uv.y) + u_time);
}
